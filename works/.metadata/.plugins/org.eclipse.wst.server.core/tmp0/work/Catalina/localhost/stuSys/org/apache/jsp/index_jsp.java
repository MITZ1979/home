/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M22
 * Generated at: 2017-08-10 03:07:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>学生查询管理系统</title>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\t.container {\r\n");
      out.write("\t\tmax-width: 900px;\r\n");
      out.write("\t\tmargin: 10px auto;\r\n");
      out.write("\t}\r\n");
      out.write("\theader {\r\n");
      out.write("\t\ttext-align: center;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.caption {\r\n");
      out.write("\t\tdisplay: flex;\r\n");
      out.write("\t\tjustify-content: space-between;\r\n");
      out.write("\t\tmargin-bottom: 10px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\ttable {\r\n");
      out.write("\t\twidth: 100%;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script src=\"js/jquery-3.1.1.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("// 根据 json 得到 table 的 html\r\n");
      out.write("function makeResultHtml(json) {\r\n");
      out.write("\tvar innerHtml = \"\";\r\n");
      out.write("\t$.each(json, function (k, v) {\r\n");
      out.write("\t\tinnerHtml = innerHtml + \"<tr>\"\r\n");
      out.write("\t\t\t+ \"<td><input type='checkbox' name='item' value='\" + v.stuNo + \"'></td>\"\r\n");
      out.write("\t\t\t+ \"<td>\" + v.stuNo + \"</td>\"\r\n");
      out.write("\t\t\t+ \"<td>\" + v.stuName + \"</td>\"\r\n");
      out.write("\t\t\t+ \"<td>\" + v.stuAge + \"</td>\"\r\n");
      out.write("\t\t\t+ \"<td>\" + v.stuSex + \"</td>\"\r\n");
      out.write("\t\t\t+ \"<td>\" + v.score + \"</td>\"\r\n");
      out.write("\t\t\t+ \"</tr>\";\r\n");
      out.write("\t});\r\n");
      out.write("\treturn innerHtml;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 加载完\r\n");
      out.write("$(function () {\r\n");
      out.write("\t// 初始化页面\r\n");
      out.write("\t$.get(\"stulist\", \"\", function (res) {\r\n");
      out.write("\t\t$(\".main table\").html(makeResultHtml(res));\r\n");
      out.write("\t}, \"json\");\r\n");
      out.write("\r\n");
      out.write("\t// 模糊查询\r\n");
      out.write("\t$(\"#fuzzyQuery\").click(function () {\r\n");
      out.write("\t\t$.get(\"stulist\", {condition: $(\"#condition\").val()}, function (res) {\r\n");
      out.write("\t\t\t$(\".main table\").html(makeResultHtml(res));\r\n");
      out.write("\t\t}, \"json\");\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t// 删除\r\n");
      out.write("\t$(\"#delbutton\").click(function () {\r\n");
      out.write("\t\tif(!window.confirm(\"你是否要删除？\")) return;\r\n");
      out.write("\t\t\r\n");
      out.write("\t \t$.get(\"studel\", $(\"td input:checked\").serialize(), function () {\r\n");
      out.write("\t\t\talert(\"删除成功。\");\r\n");
      out.write("\t\t\t// 刷新页面\r\n");
      out.write("\t\t\twindow.location.reload();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("\t<header>\r\n");
      out.write("\t\t<h1>学生管理系统</h1>\r\n");
      out.write("\t</header>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"caption\">\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<span>条件:</span>\r\n");
      out.write("\t\t\t<input id=\"condition\" name=\"condition\" >\r\n");
      out.write("\t\t\t<button id=\"fuzzyQuery\">模糊查询</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<button id=\"delbutton\">删除</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"main\">\r\n");
      out.write("\t\t<table border=1>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
